from decouple import config
from unipath import Path


"""
Django settings for zyllion project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = Path(__file__)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

ALLOWED_HOSTS = [".zyllion.co", "localhost", "127.0.0.1"]
ADMINS = [('Ryan', 'ryan.oneal@zyllion.co')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'data',
    'storages',
    'corsheaders',
    'rest_auth'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'data.middleware.UserLimitMiddleware',
    'data.middleware.DeactivatedAccountMiddleware',
]

ROOT_URLCONF = 'zyllion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zyllion.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

AUTH_USER_MODEL = 'data.User'

#custom REST FRAMEWORK EXCEPTION HANDLER --prefixes the list of errors with errors
###Add this back in  #DEFAULT_RENDERER_CLASSES should ultimately be added to onlty prod seetings file --this disables ability to see test in browser
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'EXCEPTION_HANDLER': 'data.exceptions.custom_exception_handler',
    # 'DEFAULT_RENDERER_CLASSES': (
    #     'rest_framework.renderers.JSONRenderer',
    # ),
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=60),
    'JWT_GET_USER_SECRET_KEY': 'data.models.jwt_get_secret_key',
    'JWT_ALLOW_REFRESH':datetime.timedelta(days=7)
}

API_USER_GROUPS = ['Account manager', 'Admin', 'AP manager', 'AP user', 'AR manager', 'AR user', 'Onboard user']

#local Tax Form upload globals
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

#email settings
DEFAULT_FROM_EMAIL = config('EMAIL_HOST_USER')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

#used for password reset with django-rest-auth
REST_USE_JWT = True


REST_AUTH_SERIALIZERS = {
    'PASSWORD_RESET_SERIALIZER':
        'data.serializers.PasswordResetSerializer',
}

LOGGING_DIR = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), 'logs/')

if not os.path.exists(LOGGING_DIR):
    os.mkdir(LOGGING_DIR)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(asctime)s - %(module)s -> %(levelname)s - %(message)s'
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        # 'console_debug_false': {
        #     'level': 'ERROR',
        #     'filters': ['require_debug_false'],
        #     'class': 'logging.StreamHandler',
        # },
        'debug_log_handler_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'debug_log.txt'),
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
        },
        'debug_log_handler_warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'debug_log.txt'),
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
        },
        'db_log_handler': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'db_log.txt'),
            'when': 'W0',
            'interval': 1,
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
        'request_log_handler': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'request_log.txt'),
            'when': 'W0',
            'interval': 1,
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
        'site_log_handler': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGGING_DIR, 'log.txt'),
            'when': 'W0',
            'interval': 1,
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'debug_log_handler_warning'],
            'level': 'DEBUG',
            'propagate': True,
            'filters': ['require_debug_false']
        },
        'django.db.backends': {
            'handlers': ['db_log_handler'],
            'level': 'ERROR',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_log_handler'],
            'level': 'ERROR',
            'propagate': True
        },
        'data': {
            'handlers': ['site_log_handler'],
            'level': 'ERROR',
            'propagate': True
        },
    }
}